package com.ucd.server.controller.tdhservicescontroller;


import com.ucd.common.VO.ResultVO;
import com.ucd.common.enums.ResultEnum;
import com.ucd.common.utils.ResultVOUtil;
import com.ucd.common.utils.pager.PageView;
import com.ucd.daocommon.DTO.tdhdsDTO.TdhDsDTO;
import com.ucd.daocommon.DTO.tdhdsDTO.TdhDsMonthsDTO;
import com.ucd.server.enums.TdhServicesReturnEnum;
import com.ucd.server.service.tdhservicesservice.TdhServicesDsService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import java.util.List;

@RestController
@RequestMapping("/softwareDs")
public class TdhServicesDsController {

    /**
     * 引入日志，注意都是"org.slf4j"包下
     */
    private final static Logger logger = LoggerFactory.getLogger(TdhServicesDsController.class);

    @Autowired
    private TdhServicesDsService tdhServicesDsService;





    @PostMapping(value = "/getThdServicesDsInfo")
    public ResultVO getThdServicesDsInfo(PageView pageView, TdhDsDTO tdhSDsDTO){
        ResultVO resultVO = new ResultVO();
        try {
            if(pageView == null){
                pageView = new PageView();
            }
            pageView =tdhServicesDsService.getThdServicesDsInfo(pageView,tdhSDsDTO);
            resultVO = ResultVOUtil.setResult(TdhServicesReturnEnum.SUCCESS.getCode(),TdhServicesReturnEnum.SUCCESS.getMessage(),pageView);
            logger.info("resultVO:"+resultVO);
            return resultVO;
        } catch (Exception e) {
            e.printStackTrace();
            resultVO = ResultVOUtil.error(e);
            logger.info("resultVO:"+resultVO);
            return resultVO;
        }
    }

    @PostMapping(value = "/getThdDsListData")
    public ResultVO getThdDsListData(@RequestBody List<TdhDsDTO> tdhDsDTOS){
        ResultVO resultVO = new ResultVO();
        try {
            resultVO = tdhServicesDsService.getThdDsListData(tdhDsDTOS);
            logger.info("resultVO:"+resultVO);
            return resultVO;
        } catch (Exception e) {
            e.printStackTrace();
            resultVO = ResultVOUtil.error(e);
            logger.info("resultVO:"+resultVO);
            return resultVO;
        }
    }

    /**
     * 按月，表名，状态对数据同步表做统计展示（配合同步审核处理操作）
     * @param pageView
     * @param tdhDsMonthsDTO
     * @return
     */
    @PostMapping(value = "/getTdhDsMonthsInfo")
    public ResultVO getTdhDsMonthsInfo(PageView pageView, TdhDsMonthsDTO tdhDsMonthsDTO){
        ResultVO resultVO = new ResultVO();
        try {
            if(pageView == null){
                pageView = new PageView();
            }
            pageView =tdhServicesDsService.getTdhDsMonthsInfo(pageView,tdhDsMonthsDTO);
            resultVO = ResultVOUtil.setResult(TdhServicesReturnEnum.SUCCESS.getCode(),TdhServicesReturnEnum.SUCCESS.getMessage(),pageView);
            logger.info("resultVO:"+resultVO);
            return resultVO;
        } catch (Exception e) {
            e.printStackTrace();
            resultVO = ResultVOUtil.error(e);
            logger.info("resultVO:"+resultVO);
            return resultVO;
        }
    }

    /**
     * 向对端发送要进行定时任务的审核
     * @param tdhDsMonthsDTOS
     * @return
     */
    @PostMapping(value = "/auditThdDsListData")
    public ResultVO auditThdDsListData(@RequestBody List<TdhDsMonthsDTO> tdhDsMonthsDTOS){
        ResultVO resultVO = new ResultVO();
        try {
            //通过cookie获得用户信息与数据库做校验，不满足直接返回失败，满足进行下一步操作
            resultVO = tdhServicesDsService.auditThdDsListData(tdhDsMonthsDTOS);
            logger.info("resultVO:"+resultVO);
            return resultVO;
        } catch (Exception e) {
            e.printStackTrace();
            resultVO = ResultVOUtil.error(e);
            logger.info("resultVO:"+resultVO);
            return resultVO;
        }
    }
}
