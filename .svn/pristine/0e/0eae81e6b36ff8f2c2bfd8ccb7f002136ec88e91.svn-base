package com.ucd.server.service.impl.tdhservicesserviceimpl;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.ucd.client.DaoClient;

import com.ucd.common.VO.ResultVO;
import com.ucd.common.enums.ResultExceptEnum;
import com.ucd.common.utils.KeyUtil;
import com.ucd.common.utils.Tools;
import com.ucd.common.utils.pager.PageView;
import com.ucd.daocommon.DTO.tdhServicesDTO.TdhServicesHealthckDTO;
import com.ucd.daocommon.DTO.tdhServicesDTO.TdhServicesInfoDTO;
import com.ucd.localdaoclient.LocalDaoClient;
import com.ucd.server.exception.SoftwareException;
import com.ucd.server.service.tdhservicesservice.TdhServicesService;
import com.ucd.server.trapswapApi.ManagerApi.ServicesApi;
import com.ucd.server.trapswapApi.ManagerApi.UserApi;
import com.ucd.server.trapswapApi.connection.Connection;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;


import java.util.ArrayList;
import java.util.Date;
import java.util.List;
@Service
public class TdhServicesServiceImpl implements TdhServicesService {

    @Autowired
    public DaoClient daoClient;

    @Autowired
    public LocalDaoClient localDaoClient;
    private final static Logger logger = LoggerFactory.getLogger(TdhServicesServiceImpl.class);
    @Override
    public List<TdhServicesInfoDTO> saveThdServicesData() throws Exception{
        List<TdhServicesInfoDTO> result = new ArrayList<>();
        Connection client = new Connection("http://10.28.3.51:8180/api");
        Date now = new Date();
            Gson gs = new Gson();
            if (UserApi.login(client, "admin", "admin")) {
                String servicesInfo = ServicesApi.getAllServices(client);
                System.out.println(servicesInfo);
                result = gs.fromJson(servicesInfo,new TypeToken<List<TdhServicesInfoDTO>>(){}.getType());
                logger.info(result.toString());
                UserApi.logout(client);
                client.close();
                if (result == null) {
                    logger.info("异常：e=" + ResultExceptEnum.ERROR_NOFOUND);
                    throw new SoftwareException(ResultExceptEnum.ERROR_NOFOUND);
                }
                for (TdhServicesInfoDTO tdhServicesInfoDTO:result){
                    String healthChecksId = KeyUtil.genUniqueKey();
                    tdhServicesInfoDTO.setCreattime(now);
                    tdhServicesInfoDTO.setHealthChecksId(healthChecksId);
                    logger.info(tdhServicesInfoDTO.toString());
                    List<TdhServicesHealthckDTO> tdhServicesHealthckDTOList = tdhServicesInfoDTO.getHealthChecks();
                    if (null == tdhServicesHealthckDTOList || tdhServicesHealthckDTOList.size() ==0){
                        logger.info("tdhServicesHealthckDTOList为空");
                    }else{
                        for (TdhServicesHealthckDTO tdhServicesHealthckDTO:tdhServicesHealthckDTOList){
                            tdhServicesHealthckDTO.setCreattime(now);
                            tdhServicesHealthckDTO.setHealthChecksId(healthChecksId);
                            logger.info(tdhServicesHealthckDTO.toString());
                        }
                    }
                    //插入数据库，调用monitor-dao微服务
                    ResultVO resultVO = daoClient.saveThdServicesData(tdhServicesInfoDTO);
                    logger.info("resultVO=" + resultVO);
                    if("2"== resultVO.getCode()){
                        logger.info("异常：e=" + ResultExceptEnum.ERROR_INSERT + "," + resultVO.getMsg());
                        throw new SoftwareException(ResultExceptEnum.ERROR_INSERT,resultVO.getMsg());
                    }else if ("1"== resultVO.getCode()){
                        logger.info("异常：e=" + ResultExceptEnum.ERROR_INSERT + "," + resultVO.getMsg());
                        throw new SoftwareException(ResultExceptEnum.ERROR_INSERT,resultVO.getMsg());
                    }
                }

            }

        return result;

    }

    @Override
    public PageView getThdServicesInfo(PageView pageView) throws Exception {
        ResultVO resultVO = daoClient.getThdServicesInfo(pageView);
        logger.info("resultVO=" + resultVO);
        if ("0"== resultVO.getCode()) {
            Object object = daoClient.getThdServicesInfo(pageView).getData();
            if (object != null) {
                String pageViewString = Tools.toJson(object);
                Gson gs = new Gson();
                pageView = gs.fromJson(pageViewString, new TypeToken<PageView>() {
                }.getType());
                logger.info("pageViewString:" + pageViewString);
            }
        }else if("1"== resultVO.getCode()){
            logger.info("异常：e=" + ResultExceptEnum.ERROR_SELECT + "," + resultVO.getMsg());
            throw new SoftwareException(ResultExceptEnum.ERROR_SELECT,resultVO.getMsg());
        }
        return  pageView;
    }

    @Override
    public List<com.ucd.localdaocommon.DTO.tdhServicesDTO.TdhServicesInfoDTO> saveThdServicesLocalDao() throws Exception {
        List<com.ucd.localdaocommon.DTO.tdhServicesDTO.TdhServicesInfoDTO> result = new ArrayList<>();
        Connection client = new Connection("http://10.28.3.51:8180/api");
        Date now = new Date();
        Gson gs = new Gson();
        if (UserApi.login(client, "admin", "admin")) {
            String servicesInfo = ServicesApi.getAllServices(client);
            System.out.println(servicesInfo);
            result = gs.fromJson(servicesInfo,new TypeToken<List<com.ucd.localdaocommon.DTO.tdhServicesDTO.TdhServicesInfoDTO>>(){}.getType());
            logger.info(result.toString());
            UserApi.logout(client);
            client.close();
            if (result == null) {
                logger.info("异常：e=" + ResultExceptEnum.ERROR_NOFOUND);
                throw new SoftwareException(ResultExceptEnum.ERROR_NOFOUND);
            }
            for (com.ucd.localdaocommon.DTO.tdhServicesDTO.TdhServicesInfoDTO tdhServicesInfoDTO:result){
                String healthChecksId = KeyUtil.genUniqueKey();
                tdhServicesInfoDTO.setCreattime(now);
                tdhServicesInfoDTO.setHealthChecksId(healthChecksId);
                logger.info(tdhServicesInfoDTO.toString());
                List<com.ucd.localdaocommon.DTO.tdhServicesDTO.TdhServicesHealthckDTO> tdhServicesHealthckDTOList = tdhServicesInfoDTO.getHealthChecks();
                if (null == tdhServicesHealthckDTOList || tdhServicesHealthckDTOList.size() ==0){
                    logger.info("tdhServicesHealthckDTOList为空");
                }else{
                    for (com.ucd.localdaocommon.DTO.tdhServicesDTO.TdhServicesHealthckDTO tdhServicesHealthckDTO:tdhServicesHealthckDTOList){
                        tdhServicesHealthckDTO.setCreattime(now);
                        tdhServicesHealthckDTO.setHealthChecksId(healthChecksId);
                        logger.info(tdhServicesHealthckDTO.toString());
                    }
                }
                //插入数据库，调用monitor-dao微服务
                ResultVO resultVO = localDaoClient.saveThdServicesData(tdhServicesInfoDTO);
                logger.info("resultVO=" + resultVO);
                if("2"== resultVO.getCode()){
                    logger.info("异常：e=" + ResultExceptEnum.ERROR_INSERT + "," + resultVO.getMsg());
                    throw new SoftwareException(ResultExceptEnum.ERROR_INSERT,resultVO.getMsg());
                }else if ("1"== resultVO.getCode()){
                    logger.info("异常：e=" + ResultExceptEnum.ERROR_INSERT + "," + resultVO.getMsg());
                    throw new SoftwareException(ResultExceptEnum.ERROR_INSERT,resultVO.getMsg());
                }
            }

        }

        return result;
    }
}
