package com.ucd.server.service.impl.tdhservicesserviceimpl;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.ucd.client.DaoClient;
import com.ucd.common.DTO.tdhServicesDTO.TdhServicesHealthckDTO;
import com.ucd.common.DTO.tdhServicesDTO.TdhServicesInfoDTO;
import com.ucd.common.VO.ResultVO;
import com.ucd.server.enums.ResultEnum;
import com.ucd.server.exception.SoftwareException;
import com.ucd.server.service.tdhservicesservice.TdhServicesService;
import com.ucd.server.trapswapApi.ManagerApi.ServicesApi;
import com.ucd.server.trapswapApi.ManagerApi.UserApi;
import com.ucd.server.trapswapApi.connection.Connection;
import com.ucd.softwarecommon.utils.KeyUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.transaction.Transactional;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
@Service
public class TdhServicesServiceImpl implements TdhServicesService {

    @Autowired
    public DaoClient daoClient;
    private final static Logger logger = LoggerFactory.getLogger(TdhServicesServiceImpl.class);
    @Override
    @Transactional
    public List<TdhServicesInfoDTO> saveThdServicesData() throws Exception{
        List<TdhServicesInfoDTO> result = new ArrayList<>();
        Connection client = new Connection("http://10.28.3.51:8180/api");
        Date now = new Date();
            Gson gs = new Gson();
            if (UserApi.login(client, "admin", "admin")) {
                String servicesInfo = ServicesApi.getAllServices(client);
                System.out.println(servicesInfo);
                result = gs.fromJson(servicesInfo,new TypeToken<List<TdhServicesInfoDTO>>(){}.getType());
                logger.info(result.toString());
                UserApi.logout(client);
                client.close();
                if (result == null) {
                    logger.info("异常：e=" + ResultEnum.ERROR_NOFOUND);
                    throw new SoftwareException(ResultEnum.ERROR_NOFOUND);
                }
                for (TdhServicesInfoDTO tdhServicesInfoDTO:result){
                    String healthChecksId = KeyUtil.genUniqueKey();
                    tdhServicesInfoDTO.setCreattime(now);
                    tdhServicesInfoDTO.setHealthChecksId(healthChecksId);
                    logger.info(tdhServicesInfoDTO.toString());
                    List<TdhServicesHealthckDTO> tdhServicesHealthckDTOList = tdhServicesInfoDTO.getHealthChecks();
                    if (null == tdhServicesHealthckDTOList || tdhServicesHealthckDTOList.size() ==0){
                        logger.info("tdhServicesHealthckDTOList为空");
                    }else{
                        for (TdhServicesHealthckDTO tdhServicesHealthckDTO:tdhServicesHealthckDTOList){
                            tdhServicesHealthckDTO.setCreattime(now);
                            tdhServicesHealthckDTO.setHealthChecksId(healthChecksId);
                            logger.info(tdhServicesHealthckDTO.toString());
                        }
                    }
                    //插入数据库，调用monitor-dao微服务
                    ResultVO resultVO = daoClient.saveThdServicesData(tdhServicesInfoDTO);
                    if("2".equals(resultVO.getCode())){
                        logger.info("异常：e=" + ResultEnum.ERROR_INSERT + "," + resultVO.getMsg());
                        throw new SoftwareException(ResultEnum.ERROR_INSERT,resultVO.getMsg());
                    }else if ("1".equals(resultVO.getCode())){
                        logger.info("异常：e=" + ResultEnum.ERROR_INSERT + "," + resultVO.getMsg());
                        throw new SoftwareException(ResultEnum.ERROR_INSERT,resultVO.getMsg());
                    }
                }

            }

        return result;

    }
}
