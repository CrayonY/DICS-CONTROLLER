package com.ucd.server.controller.tdhmetriccontroller;
 
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletResponse;


import com.ucd.common.VO.ResultVO;
import com.ucd.common.exception.BaseException;
import com.ucd.common.utils.ResultVOUtil;
import com.ucd.daocommon.DTO.tdhmetricDTO.TdhMetricDTO;
import com.ucd.daocommon.VO.tdhmetricVO.MetricInfoVO;
import com.ucd.server.enums.TdhMetricReturnEnum;
import com.ucd.server.service.tdhmetricservice.TdhMetricService;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;




 
@RestController
@RequestMapping("/tdhMetric")
public class TdhMetricController {
	
	@Autowired
	private TdhMetricService tdhMetricService;
	
	/**
	 * 引入日志，注意都是"org.slf4j"包下
	 */
	private final static Logger logger = LoggerFactory.getLogger(TdhMetricController.class);
	
	/**
	 * @author lx 
	 * @date    
	 * @param httpServletResponse
	 * @return  String
	 * @throws Exception 
	 */
	@GetMapping(value = "/saveTdhMetric")
    public  String saveTdhMetric(HttpServletResponse httpServletResponse) throws Exception {
        logger.info("进入controller啦——————————————");
		List<TdhMetricDTO> result = tdhMetricService.saveTdhMetric();
		if (result == null) {
			return "数据插入异常";
		}
		return "数据已成功插入！";
	}




//	  public  List<RestApiResult> getTranSwarpData() throws Exception {
//		  logger.info("进入controller啦——————————————");
//			List<RestApiResult> result = tdhMetricService.getTranSwarpData();
//			if (result == null) {
//				logger.error("异常：e=" + ExceptionEnum.ERROR_NOFOUND.getValue());
//				throw new NoFoundExcepiton(ExceptionEnum.ERROR_NOFOUND.getValue());
//			}
//			return result;
//	    }

	@GetMapping(value = "/getMetricAllInfo")
	public ResultVO getMetricAllInfo(){
        return null;
    }

	@GetMapping(value = "/getClustersMetric")
	public ResultVO getClustersMetric(@RequestParam(value = "startTimeStamp", required = true) String startTimeStamp,
									@RequestParam(value = "endTimeStamp", required = true) String endTimeStamp,
									@RequestParam(value = "metricName", required = true) String metricName) throws Exception {
		List<MetricInfoVO> metricInfoVOList = tdhMetricService.getClustersMetric();
		if (metricInfoVOList == null) {
			ResultVOUtil.setResult(TdhMetricReturnEnum.PARAM_ERROR.getCode(),TdhMetricReturnEnum.PARAM_ERROR.getMessage(),new ArrayList<MetricInfoVO>());
		}

		return ResultVOUtil.setResult(TdhMetricReturnEnum.SUCCESS.getCode(),TdhMetricReturnEnum.SUCCESS.getMessage(),metricInfoVOList);
	}
}
